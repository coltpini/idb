export default class IDB{constructor({schema:e,storeName:t,v:r}){this.schema=e,this.storeName=t,this.v=r,this.go()}go(){return new Promise((e,t)=>{const r=indexedDB.open(this.storeName,this.v);r.addEventListener("error",e=>t(e.target.error)),r.addEventListener("success",t=>e(t.target.result)),r.addEventListener("upgradeneeded",e=>this.upgrade(e.target.result)),r.addEventListener("blocked",e=>t("blocked"))})}upgrade(e){let t=this.schema[0].options||{};"index"===this.schema[0].type&&(t.keyPath=this.schema[0].name);const r=e.createObjectStore(this.storeName,t);this.schema.filter(e=>"index"===e.type).forEach(e=>r.createIndex(e.name,e.keyPath||e.name,e.options))}getTransaction(e){const t=e.transaction(this.storeName,`readwrite`);return{trx:t,store:t.objectStore(this.storeName)}}put(e){return this.go().then(t=>{let{trx:r,store:s}=this.getTransaction(t);return!Array.isArray(e)&&(e=[e]),e.forEach(e=>s.put(e)),new Promise((e,s)=>{r.oncomplete=(()=>{t.close(),e("completed")}),r.onerror=(e=>s(e.target.error))})})}get(e){return this.go().then(t=>{let{trx:r,store:s}=this.getTransaction(t),o=s.get(e);return new Promise((e,t)=>{o.onsuccess=(()=>e(o.result.file)),o.onerror=(()=>t("failed to read"))})})}find(){}delete(e){return this.go().then(t=>{let{trx:r,store:s}=this.getTransaction(t),o=s.delete(e);return new Promise((e,t)=>{o.onsuccess=(()=>e("deleted")),o.onerror=(()=>t("failed to delete"))})})}};